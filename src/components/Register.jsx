import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Form, Alert, Button } from 'react-bootstrap';
import { useUserAuth } from '../context/UserAuthContext.jsx';
import '../css/Register.css';
import signup from '../assets/sign up.png';
import backgroundImage from '../assets/2.png';
import { doc, setDoc } from "firebase/firestore";
import { db } from '../firebase/firebase.js';

function Register() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [fullName, setFullName] = useState('');
  const [birthDay, setBirthDay] = useState('');
  const [birthMonth, setBirthMonth] = useState('');
  const [birthYear, setBirthYear] = useState('');
  const [error, setError] = useState('');
  const { signUp } = useUserAuth();
  const navigate = useNavigate();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  const hasUpperCase = /[A-Z]/.test(password);
  const hasLowerCase = /[a-z]/.test(password);
  const hasNumber = /\d/.test(password);
  const hasSpecialChar = /[!@#$%^&*/()]/.test(password);
  const isLongEnough = password.length >= 8;

  const isPasswordStrong = hasUpperCase && hasLowerCase && hasNumber && hasSpecialChar && isLongEnough;

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    if (!fullName || !birthDay || !birthMonth || !birthYear) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }

    if (!isPasswordStrong) {
      setError("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
      return;
    }

    try {
      const userCredential = await signUp(email, password);
      const user = userCredential.user;
      const birthday = `${birthDay} ${birthMonth} ${birthYear}`;
      await setDoc(doc(db, "users", user.uid), {
        fullName,
        birthday,
        email,
        createdAt: new Date()
      });
      navigate('/intro');
    } catch (err) {
      if (err.code === "auth/email-already-in-use") {
        setError("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô");
      } else {
        setError(err.message);
      }
      console.log(err);
    }
  };

  return (
    <div className="bg-signup" style={{
      backgroundImage: `url(${backgroundImage})`,
      backgroundSize: 'cover',
      backgroundPosition: 'center',
      height: '100vh'
    }}>
      <img src={signup} className='signup1' />
      <div className='formbox'>
        {error && <Alert variant='danger'>{error}</Alert>}
        <Form onSubmit={handleSubmit} className='form-content'>
          <p className='textform'>‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</p>
          <input type='text' value={fullName} onChange={(e) => setFullName(e.target.value)} required />

          <div className="birth-select-group">
            <p className='textform'>‡∏ß‡∏±‡∏ô</p>
            <select value={birthDay} onChange={(e) => setBirthDay(e.target.value)} required>
              <option></option>
              {[...Array(31)].map((_, i) => <option key={i}>{i + 1}</option>)}
            </select>
            <p className='textform'>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
            <select value={birthMonth} onChange={(e) => setBirthMonth(e.target.value)} required>
              <option></option>
              {["‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"].map((month, i) => (
                <option key={i}>{month}</option>
              ))}
            </select>
            <p className='textform'>‡∏õ‡∏µ</p>
            <select value={birthYear} onChange={(e) => setBirthYear(e.target.value)} required>
              <option></option>
              {Array.from({ length: 100 }, (_, i) => 2565 - i).map((year) => (
                <option key={year}>{year}</option>
              ))}
            </select>
          </div>

          <p className='textform'>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</p>
          <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />

          <p className='textform'>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</p>
          <div style={{ position: 'relative' }}>
            <input
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              style={{ paddingRight: '40px' }}
            />
            <button type="button" onClick={() => setShowPassword(!showPassword)} style={{
              position: 'absolute',
              right: '10px',
              top: '50%',
              transform: 'translateY(-50%)',
              background: 'none',
              border: 'none',
              cursor: 'pointer'
            }}>
              {showPassword ? 'üôà' : 'üëÅÔ∏è'}
            </button>
          </div>

          {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
          <ul style={{ fontSize: '0.9em', marginTop: '0px', color: '#555' }}>
            <li>{hasUpperCase ? '‚úÖ' : '‚ùå'} ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà (A‚ÄìZ)</li>
            <li>{hasLowerCase ? '‚úÖ' : '‚ùå'} ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å (a‚Äìz)</li>
            <li>{hasNumber ? '‚úÖ' : '‚ùå'} ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (0‚Äì9)</li>
            <li>{hasSpecialChar ? '‚úÖ' : '‚ùå'} ‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© (!@#$%^&*/)</li>
            <li>{isLongEnough ? '‚úÖ' : '‚ùå'} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</li>
          </ul>

          <div className='submit-btn'>
            <Button variant='primary' type='submit'>
              ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
            </Button>
          </div>
        </Form>

        <br />
        <div className='text-text'>‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°? <Link to='/login'>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Link></div>
      </div>
    </div>
  );
}

export default Register;
