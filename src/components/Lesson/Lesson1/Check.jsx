import React, { useState } from 'react';
import '../../../css/Check.css';

const questions = [
  {
    image: '/public/check.png',
    answerArea: { x: 120, y: 150, radius: 30 },
    explanation: '‡πÄ‡∏•‡πà‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà',
    arrowPos: { top: 140, left: 150 }
  },
  {
    image: '/public/check.png',
    answerArea: { x: 300, y: 220, radius: 35 },
    explanation: '‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏£‡∏∞‡πÇ‡∏¢‡∏á‡∏£‡∏∞‡∏¢‡∏≤‡∏á',
    arrowPos: { top: 210, left: 330 }
  },
  {
    image: '/public/check.png',
    answerArea: { x: 210, y: 120, radius: 25 },
    explanation: '‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏∞‡∏Å‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô',
    arrowPos: { top: 110, left: 240 }
  }
];

export default function RiskGame() {
  const [started, setStarted] = useState(false);
  const [questionIdx, setQuestionIdx] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [showExplanation, setShowExplanation] = useState(false);
  const [completed, setCompleted] = useState(false);

  const handleStart = () => {
    setStarted(true);
  };

  const handleClick = (e) => {
    if (showExplanation) return;
    const rect = e.target.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    const { x: ax, y: ay, radius } = questions[questionIdx].answerArea;
    const dist = Math.sqrt((x - ax) ** 2 + (y - ay) ** 2);

    if (dist <= radius) {
      setShowExplanation(true);
      setFeedback('‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‚úÖ');
    } else {
      setFeedback('‡∏ú‡∏¥‡∏î ‚ùå ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    }
  };

  const handleNext = () => {
    if (questionIdx + 1 < questions.length) {
      setQuestionIdx(q => q + 1);
      setShowExplanation(false);
      setFeedback('');
    } else {
      setCompleted(true);
    }
  };

  if (!started) {
    return (
      <div className="start-container">
        <div className="start-card">
          <h1>üéÆ ‡πÄ‡∏Å‡∏°‡∏à‡∏±‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á</h1>
          <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
          <button className="start-btn" onClick={handleStart}>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°</button>
        </div>
      </div>
    );
  }

  if (completed) {
    return (
      <div className="game-container">
        <h2>‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•</h2>
        <p>‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß üéâ</p>
        <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°</p>
      </div>
    );
  }

  const question = questions[questionIdx];

  return (
    <div className="game-container">
      <h3>‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ç‡πâ‡∏≠ {questionIdx + 1}</h3>
      <div className="image-box" onClick={handleClick} style={{ position: 'relative' }}>
        <img src={question.image} alt={`question-${questionIdx}`} />

        {showExplanation && (
          <div
            className="arrow-box"
            style={{
              position: 'absolute',
              top: question.arrowPos.top,
              left: question.arrowPos.left,
              backgroundColor: 'red',
              color: '#fff',
              padding: '6px 10px',
              borderRadius: '6px',
              whiteSpace: 'nowrap'
            }}
          >
            ‚û§ {question.explanation}
          </div>
        )}

        {showExplanation && (
          <div
            style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              backgroundColor: 'green',
              color: '#fff',
              padding: '8px 12px',
              borderRadius: '8px'
            }}
          >
            ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞
          </div>
        )}
      </div>

      <div className="feedback">{feedback}</div>

      {showExplanation && (
        <div className="explanation">
          <button onClick={handleNext}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
        </div>
      )}
    </div>
  );
}
